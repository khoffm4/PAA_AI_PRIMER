---

---

This notebook demonstrates how to perform valid inference on predicted data using the `ipd` package. You can find full documentation for the package here: <https://github.com/ipd-tools/ipd>

## Measuring Obesity

Despite being extremely simple, the body mass index (BMI) is a prediction algorithm that maps the ratio of a persons height and weight to healthy weight category. A more detailed measure of total body fat percentage can be obtained using a DXA scan or an MRI. Because it is so easy to collect and is understood to perform "good enough", the BMI is by far the most common metric used to measure overweight, in the USA and indeed globally. However, BMI is far less predictive of health outcomes compared to DXA total body fat percentage.

The goal of this exercise is to follow the example of Vioque et al 2000: [*Time spent watching television, sleep duration and obesity in adults living in Valencia, Spain*](https://www.nature.com/articles/0801434) using NHANES data to estimate the association between obesity and independent variables: age, activity levels, sleep, and smoking behavior. We will perform parallel analyses using both BMI and DXA measures and compare our results. Then, we will perform an IPD correction treating BMI as obesity "prediction" and DXA as obesity "ground truth" to see how the calibration compares to our original BMI and DXA analyses.

## NHANES data source

The National Health and Nutrition Examination Survey (NHANES) is a program of studies designed to assess the health and nutritional status of adults and children in the United States. In 1999, the survey became a continuous program that has a changing focus on a variety of health and nutrition measurements to meet emerging needs. The survey examines a nationally representative sample of about 5,000 persons each year. Importantly for our purposes, both BMI and DXA measures were collected in 2011-2017, allowing us to perform an IPD calibration from labeled and unlabeled observed obesity.

```{r, warning=FALSE, message=FALSE, include=FALSE}

# load libraries 
if (!require("knitr")) install.packages("knitr")
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("data.table")) install.packages("data.table")
if (!require("devtools")) install.packages("devtools")
if (!require("gt")) install.packages("gt")
if (!require("broom")) install.packages("broom")
if (!require("haven")) install.packages("haven")
library(knitr)
library(dplyr)
library(ggplot2)
library(data.table)
library(devtools)
library(gt)
library(broom)
library(haven)
if (!require("ipd")) devtools::install_github("ipd-tools/ipd")
library(ipd)

# set number of digits to 2 for tidy outputs later on
options(digits=2)
```

### Load 2011-2017 data. It has already been transformed to match the variable coding in Vioque 2000.

```{r, warning=FALSE, message=FALSE}
# load NHANES data
df = as.data.table(read.csv("nhanes_2011_2017_vioque.csv"))
```

```{r, warning=FALSE, message=FALSE, include=FALSE}

# set factor levels and reference categories
# Gender category levels
gender_levels <- c("Males", "Females")
df[, gender_cat := factor(gender_cat, 
                                   levels = gender_levels)]
df[, gender_cat := relevel(gender_cat, ref = "Males")]
df[, gender_cat := factor(gender_cat, 
                                   levels = gender_levels)]
df[, gender_cat := relevel(gender_cat, ref = "Males")]

# Smoking category levels
smoke_levels <- c("Never smoked", "Past smoker", "Smoker")
df[, smoke_cat := factor(smoke_cat, 
                                   levels = smoke_levels)]
df[, smoke_cat := relevel(smoke_cat, ref = "Never smoked")]
df[, smoke_cat := factor(smoke_cat, 
                                   levels = smoke_levels)]
df[, smoke_cat := relevel(smoke_cat, ref = "Never smoked")]

# Marriage category levels
marriage_levels <- c("Single", "Married", "Widowed")
df[, marriage_cat := factor(marriage_cat, 
                                     levels = marriage_levels)]
df[, marriage_cat := relevel(marriage_cat, ref = "Single")]
df[, marriage_cat := factor(marriage_cat, 
                                     levels = marriage_levels)]
df[, marriage_cat := relevel(marriage_cat, ref = "Single")]

# Age category levels
age_levels <- c("15-24y", "25-34y", "35-49y", "50-64y", ">65y")
df[, age_cat := factor(age_cat, 
                                levels = age_levels)]
df[, age_cat := relevel(age_cat, ref = "15-24y")]
df[, age_cat := factor(age_cat, 
                                levels = age_levels)]
df[, age_cat := relevel(age_cat, ref = "15-24y")]

# Sleep category levels
sleep_levels <- c("<7h/day", "7h/day", "8h/day", ">8h/day")
df[, sleep_cat := factor(sleep_cat, 
                                  levels = sleep_levels)]
df[, sleep_cat := relevel(sleep_cat, ref = "<7h/day")]
df[, sleep_cat := factor(sleep_cat, 
                                  levels = sleep_levels)]
df[, sleep_cat := relevel(sleep_cat, ref = "<7h/day")]

# Work physical activity category levels
work_levels <- c("Sedentary", "Moderate", "Active")
df[, work_activity_cat := factor(work_activity_cat, 
                                          levels = work_levels)]
df[, work_activity_cat := relevel(work_activity_cat, ref = "Sedentary")]
df[, work_activity_cat := factor(work_activity_cat, 
                                          levels = work_levels)]
df[, work_activity_cat := relevel(work_activity_cat, ref = "Sedentary")]

# Leisure time physical activity category levels
leisure_levels <- c("Sedentary", "Moderate", "Active")
df[, leisure_activity_cat := factor(leisure_activity_cat, 
                                            levels = leisure_levels)]
df[, leisure_activity_cat := relevel(leisure_activity_cat, ref = "Sedentary")]
df[, leisure_activity_cat := factor(leisure_activity_cat, 
                                            levels = leisure_levels)]
df[, leisure_activity_cat := relevel(leisure_activity_cat, ref = "Sedentary")]

```

### Compare BMI and DXA

What is the correlation between BMI measured obesity and DXA measured obesity?

```{r}
cor(df$obese_bmi_cat, df$obese_dxa_cat)
```

```{r, warning=FALSE, message=FALSE}

# BMI
# logistic regression
formula_bmi = obese_bmi_cat ~ age_cat +
  marriage_cat + work_activity_cat + leisure_activity_cat + 
  sleep_cat + smoke_cat

fit.logistic = glm(formula = formula_bmi, 
                   family = "binomial",
                   data = df)

# Function to add significance codes
add_signif_codes <- function(p_value) {
  case_when(
    p_value < 0.001 ~ "***",
    p_value < 0.01 ~ "**",
    p_value < 0.05 ~ "*",
    p_value < 0.1 ~ ".",
    TRUE ~ ""
  )
}

# convert results to tibble
model_summary <- tidy(fit.logistic, conf.int = TRUE, exponentiate = TRUE)

# Round numeric columns to 3 decimal places and add significance codes
model_summary <- model_summary %>%
  mutate(across(where(is.numeric), ~round(., 3))) %>%
  mutate(signif = add_signif_codes(p.value))

# Create a table using gt
gt(model_summary) %>%
  tab_header(title = "BMI Measured Obesity, NHANES 2011-2017") %>%
  fmt_number(columns = c("estimate", "std.error", "statistic", "p.value", "conf.low", "conf.high"), decimals = 3) %>%
  cols_label(
    term = "Predictor",
    estimate = "Odds Ratio",
    std.error = "Std. Error",
    statistic = "z value",
    p.value = "p-value",
    conf.low = "CI Lower",
    conf.high = "CI Upper",
    signif = "Signif."
  ) %>%
  tab_source_note(
    source_note = "Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  )

require(MASS)
bmi_coef = exp(cbind(coef(fit.logistic), confint(fit.logistic)))

# Convert to a data frame
bmi_results <- data.frame(
  Term = rownames(bmi_coef),
  Estimate = bmi_coef[, 1],
  Lower = bmi_coef[, 2],
  Upper = bmi_coef[, 3]
)
```

```{r, warning=FALSE, message=FALSE}

#DXA
# logistic regression
formula_bmi = obese_dxa_cat ~ age_cat +
  marriage_cat + work_activity_cat + leisure_activity_cat + 
  sleep_cat + smoke_cat

fit.logistic = glm(formula = formula_bmi, 
                   family = "binomial",
                   data = df)

# convert results to tibble
model_summary <- tidy(fit.logistic, conf.int = TRUE, exponentiate = TRUE)

# Round numeric columns to 3 decimal places and add significance codes
model_summary <- model_summary %>%
  mutate(across(where(is.numeric), ~round(., 3))) %>%
  mutate(signif = add_signif_codes(p.value))

# Create a table using gt
gt(model_summary) %>%
  tab_header(title = "DXA Measured Obesity") %>%
  fmt_number(columns = c("estimate", "std.error", "statistic", "p.value", "conf.low", "conf.high"), decimals = 3) %>%
  cols_label(
    term = "Predictor",
    estimate = "Odds Ratio",
    std.error = "Std. Error",
    statistic = "z value",
    p.value = "p-value",
    conf.low = "CI Lower",
    conf.high = "CI Upper",
    signif = "Signif."
  ) %>%
  tab_source_note(
    source_note = "Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  )

require(MASS)
dxa_coef = exp(cbind(coef(fit.logistic), confint(fit.logistic)))

# Convert to a data frame
dxa_results <- data.frame(
  Term = rownames(dxa_coef),
  Estimate = dxa_coef[, 1],
  Lower = dxa_coef[, 2],
  Upper = dxa_coef[, 3]
)
```

Are the BMI and DXA inference results the same? Similar? Which variables are statistically significant? Does it matter which measure of Obesity we use?

### IPD Correction

```{r, warning=FALSE, message=FALSE}

# randomly split 2011-2017 data into unlabeled and labeled data
set.seed(123)
n = nrow(df)
unlab_proportion = 0.8
df$set = "labeled"
unlab_index = sample(1:n, unlab_proportion*n)
df[unlab_index, "set"] = "unlabeled"
```

```{r, warning=FALSE, message=FALSE}
# Specify the Formula

# Fit the PostPi Correction


# Fit the PPI Correction


#-- Fit the PPI++ Correction



```

### Contrast the findings from all three sets of analysis: (1) BMI obesity inference, (2) DXA obesity inference, (3) IPD calibrated obesity inference.

### Plot results of IPD calibration.

```{r}
```

```{r, warning=FALSE, message=FALSE}
```
